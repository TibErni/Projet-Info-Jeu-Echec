#include <stdio.h>
#include <stdbool.h>

#define BOARD_SIZE 8

typedef enum {
    EMPTY,
    PLAYER1,
    PLAYER2
} Piece;



typedef Piece Board[BOARD_SIZE][BOARD_SIZE];

void initialize_board(Board board) {
    for (int i = 0; i < BOARD_SIZE; i++) {
        for (int j = 0; j < BOARD_SIZE; j++) {
            if (i == 0) {
                board[i][j] = PLAYER1;
            } else if (i == BOARD_SIZE - 1) {
                board[i][j] = PLAYER2;
            } else {
                board[i][j] = EMPTY;
            }
        }
    }
}

const char* ANSI_COLORS[] = {
    "\x1b[31m", // Rouge
    "\x1b[32m", // Vert
    "\x1b[33m", // Jaune
    "\x1b[34m", // Bleu
    "\x1b[35m", // Magenta
    "\x1b[36m", // Cyan
    "\x1b[37m", // Blanc
    "\x1b[90m"  // Gris
};
const int NUM_COLORS = sizeof(ANSI_COLORS) / sizeof(ANSI_COLORS[0]);

const char* ANSI_RESET = "\x1b[0m"; // Réinitialise la couleur

int get_color_index(int x, int y) {
    return (x + y) % NUM_COLORS;
}

void print_board(const Board board) {
    for (int x = 0; x < BOARD_SIZE; x++) {
        for (int y = 0; y < BOARD_SIZE; y++) {
            int color_index = get_color_index(x, y);
            printf("%s", ANSI_COLORS[color_index]);

            if (board[x][y] == EMPTY) {
                printf(" . ");
            } else if (board[x][y] == PLAYER1) {
                printf(" 1 ");
            } else if (board[x][y] == PLAYER2) {
                printf(" 2 ");
            }
            printf("%s", ANSI_RESET);
        }
        printf("\n");
    }
}


//Vérif les mouvement et le plateau 
bool is_inside_board(int x, int y) {
    return x >= 0 && x < BOARD_SIZE && y >= 0 && y < BOARD_SIZE;
}

bool is_piece_on_path(const Board board, int x_start, int y_start, int x_end, int y_end) {
    int dx = x_end - x_start;
    int dy = y_end - y_start;
    int x_step = (dx != 0) ? (dx > 0 ? 1 : -1) : 0;
    int y_step = (dy != 0) ? (dy > 0 ? 1 : -1) : 0;
    int x, y;

    for (x = x_start + x_step, y = y_start + y_step; x != x_end || y != y_end; x += x_step, y += y_step) {
        if (board[x][y] != EMPTY) {
            return true;
        }
    }

    return false;
}

bool is_valid_move(const Board board, Piece current_player, int x_start, int y_start, int x_end, int y_end) {
    int dx = x_end - x_start;
    int dy = y_end - y_start;

    if (!is_inside_board(x_end, y_end)) {
        return false;
    }

    if (board[x_start][y_start] != current_player || board[x_end][y_end] != EMPTY) {
        return false;
    }

    if (current_player == PLAYER1) {
        if (!((dx > 0 && abs(dy) == dx) || (dx >= 1 && dy == 0) || (dx == 0 && abs(dy) >= 1))) {
            return false;
        }
    } else if (current_player == PLAYER2) {
        if (!((dx < 0 && abs(dy) == -dx) || (dx <= -1 && dy == 0) || (dx == 0 && abs(dy) >= 1))) {
            return false;
        }
    }

    if (is_piece_on_path(board, x_start, y_start, x_end, y_end)) {
        return false;
    }

    return true;
}



bool move_piece(Board board, Piece current_player, int x_start, int y_start, int x_end, int y_end) {
    if (is_valid_move(board, current_player, x_start, y_start, x_end, y_end)) {
        board[x_start][y_start] = EMPTY;
        board[x_end][y_end] = current_player;
        return true;
    }
    return false;
}



int main() {
    Board board;
    initialize_board(board);

    printf("Plateau de jeu initial:\n");
    print_board(board);

    Piece current_player = PLAYER1;

    int x_start, y_start, x_end, y_end;
    while (true) {
        printf("Joueur %d, entrez les coordonnées de départ et d'arrivée (x_start y_start x_end y_end) ou -1 pour quitter: ", current_player);
        scanf("%d", &x_start);

        if (x_start == -1) {
            break;
        }

        scanf("%d %d %d", &y_start, &x_end, &y_end);

        if (move_piece(board, current_player, x_start, y_start, x_end, y_end)) {
            printf("Mouvement effectué.\n");
            print_board(board);
            current_player = (current_player == PLAYER1) ? PLAYER2 : PLAYER1;
        } else {
            printf("Mouvement invalide. Réessayez.\n");
        }
    }

    return 0;
}
